XPres 1.3.2
===========
Se crea el contador TContexts.idCount.
Se crea el campo TCOntext.idCtx, para identificar a los conetxtos.
Se modifica TContexts.AddContext(), para agregar un índice único a cada contexto que 
va agregando.

XPres 1.3.1
===========
Se cambia de nombre al tipo TListaCont, a TContextList.
Se cambia de nombre a TContext.tip por Tcontext.typ
Se crean los campos "autoClose", "FixErrPos" y "data" a TContext.
Se crea el método TContexts.AddContext(), para unificar los métodos que agregan 
contextos.
Se implementa código para guadar la posición de un contexto al abrir uno nuevo,
y para restaurarlo al cerrar el contexto actual.
Se modifica TContexts.SkipWhites() para que pase entre contextos, cuando el contexto
actual es de tipo "AutoClose".
Se modifica TContexts.RemoveContext, para que elimine el contexto actual, y no el 
último abierto.

XPres 1.3
=========
Se adapta el código para trabajar con SynFacilUtils 1.2.
Se cambia el tipo de TContext.TokenType a integer.
Se crea TContext.TokenAttrib.
Se cambia el tipo de TContexts.tokType a integer.
Se crea la función function TContexts.tokAttrib, para devolver el atributo.
Se cambia de nombre a GetExpression() por GetExpressionE().
Se cambia de nombre a GetExpressionCore() por GetExpression().
Se cambia de nombre a las rutinas de tipo TCompilerBase.Evaluar*, por TCompilerBase.Oper*, 
Se corrige una llamada errónea a GetExpressionE(), por GetExpression(), en 
TCompilerBase.GetOperand().
Se crean los tipos TSrcPos y TSrcPosArray.
Se agrega una protección adicional para detectar el fin del contexto en TContext.Eof().

XPres 1.2
=========
Se cambia de nombre a TType.CreateOperator() por TType.CreateBinaryOperator()
Se cambia de nombre a los parámetros de TType.CreateBinaryOperator()
Se crea el método TType.CreateUnaryOperator().
Se cambia el nombre de los campos de TxpOperator. 
Se elimina el campo idx de TxpOperator. No se estaba usando.
Se elimina el campo idx de TType. No se estab usando.
Se agrega el campo kind a TxOperator y se crea el tipo TxpOperatorKind.
Se cambia el nombre de TType.FindOperator a TType.FindBinaryOperator.
Se crean TType.FindUnaryPreOperator y TType.FindUnaryPostOperator.
Se cambia el nombre de GetOperandP() a GetOperandPrec(). 
Se crea el método TType.CreateUnaryPreOperator().
Se cambia de nombre al evento TType.OnPush por TType.OperationPush y a TType.OnPop
por TType.OperationPop.
Se divide Evaluar(), y se crean dos versiones con nombres ditintos: EvaluarPre() y 
EvaluarPost().
Se cambiar el nombre de los tipos descendientes de TxpElement, a TxpEleMain, TxpEleType, ..., 
de modo que se pueda renombrar luego y sin conflictos el tipo TType a TxpType.



XPres 1.1
=========
Se elimina el evento Load de TOperand, ya que en el nuevo esquema, no tiene sentido.
Se renombra el evento OnLoad de TType a OperationLoad, y se cabia su tipo al de una 
operación común.

La idea con estos cambios, es generalizar mejor la evaluación de expresiones, creando
3 métodos similares que deben ser llamados en el curso de una evaluación: 
* Evaluar -> Con un operando
* Evaluar -> Con un operando y un operador
* Evaluar -> Con dos operandos, un operador

Por otro lado, se convierten los campos p1 y p2 de TCompilerBase, a punteros, para evitar
tener que crear copiar de objetos, y mejorar así la velocidad.

Para ampliar la expresividad del analizador de expresiones, se crea el campo 
Toperator.Operation para poder implementar los operadores unarios, y se incluye el 
procesamiento en la rutina de evaluación de TCompilerBase.

Se cambia el nombre de TOperator.jer a Toperator.pre, para que se asocie a la precedencia.
Se cambia el nombre del tipo TxOperation a TxpOperation
Se cambia el nombre del tipo TOperations a TxpOperations.
Se cambia el nombre del tipo TOperator a TxpOperator.
Se cambia el nombre del tipo TOperators a TxpOperators.




XPres 1.0
=========
Se cambian los tipos de eventos OnExprStart, OnExprEnd de TCompilerBase, TProcExecFunction 
(y otros más) para que trabajen con métodos "of Object".
Se encapsulan las variables, que antes se hallaban dispersas, fuera de clases, para que 
ahora todas estén dentro de las clases que las usan. De este modo, se permite crear diversas
instancias de TCompilerBase (aún no probado). 
Se crea el método TCompilerBase.StartSyntax(), con las inicializaciones básicas de los 
tipos de tokens usados.
Se elimina TOperand.GetOperator y se mueve a TCompilerBase.
Se agrega un nuevo proyecto de ejemplo.
Se cambia de nombre a TContexts.QuitaContexEnt() por TContexts.RemoveContext().


XPres 0.9
=========
Se cambia el tipo TIdentifType por TxpElemType, (en la unidad XpresElements) y se renombran sus 
elementos.
Se crean las clases TxpElement y TxpElements en la unidad XpresElements.
Se cambia el campo de nombre del objeto TxpVar, de "nom" a "name".

Se cambia la definición de los elementos TxpCon, TxpVar y TxpFun, para hacerlos ahora 
descendientes de la misma clase TxpElement.
Se agregan métodos nuevos a la clase TxpFun. 
Se crea la clase TXpTreeElements, para definir al árbol de sintaxis.
Se agrega el árbol TCompilerBase.TreeElems de tipo TXpTreeElements, pero no se usa
actualmente. Se deja para futuras ampliaciones. Todavía se sigue usando cons[], vars[] y funcs[].
Se agrega el método TCOntext.NestedBlocks, para indicar los blqoues anidados.
Se agrega el método TCOntext.NextBlock, para saltar entre bloques.
Se mueve TCompilerBase.Evaluar() a PROTECTED.
Se crea el elemento TXPType, para representar a los tipos.


XPres 0.8
=========
Se cambia el nombre de algunos de los métodos de TCompilerBase, referidos a manejo de errores.
Se crean los métodos Token, TokenType y Block en TContext.
Se crea un nuevo proyecto ejemplo: "Demo4 - Parser".

XPres 0.7
=========
* Se cambia el nombre de los métodos TOperand.GetVal<XXX> por TOperand.Read<XXX>, para evitar 
confusión con métodos "Getter".
* Se convierte al registro TxpCon en clase y se almacena en lista dinámica.
* Se cambia de nombre a TVar por TxpVar y se convierte en clase.
* Se cambia de nombre a TFun por TxpFun y se convierte en clase.
* Se mueven métodos de TCompilerBase a TxpFun.
* Se crea la función func0, en lugar de usar el índice 0 de la tabla funcs[].
* Se crea la unidad XpresElements y se mueven las definiciones de constantes, variables y funciones.
* Se modifican CreateFunction() y CreateSysFunction() para que devuelvan referencias a TxpFun, 
en lugar de índices. 

XPres 0.6.9
===========
* Se crea la unidad XpresTypes y se traslada las definiciones referidas a los tipos, los operadores 
y las operaciones.
* Para lograr la modularidad, se tuvo que cambiar la definición de TProcLoadOperand para que se pueda 
declarar sin 
usar el tipo TOperand.

XPres 0.6.8
===========
* Se crea el typo TConsValue, para servir de contenedor de los valores de constantes.
* Se crea el tipo TxpCon, para constantes, usando TConsValue.
* Se crea un campo de tipo TConsValue, en TOPerand, y se eliminan los campos individuales, 
que almacenaban los valores constantes.
* Se modifican los métodos de acceso a valores constantes.
* Se agrega la dependencia de MisUtils, para manejo de idiomas.
* Se sobrecarga el método GenError(), para permitir incluri variables string.

Xpress 0.6.5
===========

* Se adecúa la librería Xpres para que pueda usar la versión 0.4b de la librería "SynFacilUtils".
* Se cambia complétamente la estructura de los archivos de la librería. Ahora Se usan los archivos 
"XpresBas.pas" y "XpresParser.pas" y se debe crear una unidad adicional que incluya a "XpresParser.pas"
para implmentar el analizador sintáctico y generador de código.
* Se encapsula en clases, gran parte del código que se encontraba definido directamente en la unidad 
"XpresParser.pas".
* Se cambia la forma en que se debe crear el generador de código. Se elimina las constantes de tipo 
"STORED_???" y se mueve quita la declaración obligatoria de los métodos de TOperand. .
* Se quita el campo "estOp" de "TOperand". 
* Se corrigen varias rutinas de "XpresParser.pas" para mejorar el manejo de los contextos.
* Diversos cambios más.

Como han habido cambios drásticos, se pierde la compatibilidad con la versión 0.6. Pero los conceptos
básicos del framework se mantienen.

La documentación referida al Framework, ha mejorado considerablemente.

Xpress 0.5b
===========

* Se cambia de nombre a "TokActL" por "tokL" en "TContexts" para hacerlo más consistente con la propiedad 
"tok".
* Se cambia de nombre a "NuevoContexEntArc" por "NewContextFromFile" en "TContexts".
* Se cambia de nombre a "NuevoContexEntTxt" por "NewContextFromTxt" en "TContexts".

* Se cambia de nombre "mosError" por "Show" en la clase "TPError".
* Se cambia de nombre "Limpiar" por "Clear" en la clase "TPError".
* Se crea la función GenError() como un acceso rápido a pErr.GenError().
* Se separa parte del código (rutinas básicas que menos probabilidad tienen de cambiar) en un archivo 
aparte llamado "XpresParser.inc".

Xpress 0.4b
===========

* Se deriva el lexer de TSynComplet, en lugar de TSynFacilSyn, para poder acceder a propiedades protegidas 
de TsynFacilSyn.
* Se incluye compilación condicional, para poder diferenciar bloques en mod intérprete y modo compialdor.
* Se cambia le nombre de varios método de "XPresBas", a la terminología inglesa.
